import "dotenv/config";
import fs from "fs";
import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions/index.js";
import { NewMessage } from "telegram/events/index.js";
import input from "input";
import { config } from "dotenv";

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const apiId = 23786159;
const apiHash = "6ed0b3de382c59f83fe872a9a32dfa2c";
const sessionFile = "./session.txt";
const targetGroupName = "xxx"
// const notesFile = "./notes.txt";
const keywords = [
    '–Ω—É–∂–Ω—ã—à—à', '—à—à', '—à–∏—à–∫–∏', '—à–∏—à–∫—É', '—à–∏—à–∫–∞', '—à–º–∞–ª—å', '—Å—Ç–∞—Ñ—á–∏–∫', '—Å—Ç–∞—Ñ—Ñ', 'skero', 'weed',
    '–±–æ—à–∫–∏', '–ø–ª—é—à–∫–∏', '–±—É—Ö', '–¥—Ä–∞–ø—á–∏–∫', '–Ω–∞–ø–∞—Å', '–±–∞–Ω–∫–∞', '—Ö–∞–ø–∞–Ω—É—Ç—å',
    '—Ö–∞–ø–Ω—É—Ç—å', '–∫—É—Ä–Ω—É—Ç—å', '—É–∫—É—Ä–∏—Ç—å—Å—è',

];

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
let stringSession = process.env.STRING_SESSION || "";

const client = new TelegramClient(new StringSession(stringSession), apiId, apiHash, { connectionRetries: 5 });


// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ –≥—Ä—É–ø–ø—É
async function addToGroup(text) {
    try {
        const dialogs = await client.getDialogs();
        const group = dialogs.find(d => d.title === targetGroupName);
        if (!group) {
            console.error("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }
        await client.sendMessage(group.id, { message: text });
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø–ø—É: ${targetGroupName}`);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É:", err);
    }
}

// –°—Ç–∞—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
(async () => {
    // –ï—Å–ª–∏ stringSession –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å–∏–º –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
    if (!stringSession || stringSession.trim() === "") {
        await client.start({
            phoneNumber: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
            password: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: "),
            phoneCode: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
            onError: (err) => console.log(err),
        });

        stringSession = client.session.save();
        fs.writeFileSync(sessionFile, stringSession);
        console.log("UserBot –∑–∞–ø—É—â–µ–Ω! –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.");
    } else {
        // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        await client.connect();
        console.log("UserBot –∑–∞–ø—É—â–µ–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π!");
    }
})();

// ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≥–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞) ======
client.addEventHandler(async (event) => {
    try {
        const message = event.message.message?.toLowerCase();
        if (!message || message.length > 20) return; // —Ñ–∏–ª—å—Ç—Ä –º—É—Å–æ—Ä–∞
        if (!keywords.some(word => message.includes(word))) return;

        let messageLink = "[UNKNOWN CHAT]";
        try {
            const chat = await event.message.getChat();
            if (chat && chat.username) {
                // –ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
                messageLink = `https://t.me/${chat.username}/${event.message.id}`;
            } else if (chat && chat.title) {
                // –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–¥–µ–ª–∞—Ç—å
                messageLink = `${chat.title} [PRIVATE GROUP, msgId:${event.message.id}]`;
            } else {
                messageLink = `[ID:${chat.id}, msgId:${event.message.id}]`;
            }
        } catch { }

        let senderName = "[UNKNOWN USER]";
        let sender = null;

        try { sender = await event.message.getSender(); } catch { }

        if (sender) {
            let username = null;
            try {
                const full = await client.getEntity(sender.id);
                if (full && full.username) username = full.username;
            } catch { }

            if (!username && event.message.isGroup) {
                try {
                    const participants = await client.getParticipants(event.message.chatId);
                    const foundUser = participants.find(u => u.id === sender.id);
                    if (foundUser && foundUser.username) username = foundUser.username;
                } catch { }
            }

            if (username) {
                senderName = '@' + username;
            } else if (event.message.isGroup) {
                try {
                    const participants = await client.getParticipants(event.message.chatId);
                    const foundUser = participants.find(u => u.id === sender.id);
                    if (foundUser) {
                        const firstName = foundUser.first_name?.trim() || "";
                        const lastName = foundUser.last_name?.trim() || "";
                        senderName = (firstName + " " + lastName).trim() || `User${sender.id}`;
                    }
                } catch (e) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", e);
                    senderName = `User${sender.id}`;
                }
            }
        } else if (event.message.senderId) {
            senderName = `[ID:${event.message.senderId}]`;
        }

        const noteText = `[‚ö°] –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç ${senderName}:\n"${event.message.message}"\nüîó ${messageLink}`;
        console.log(noteText);
        addToGroup(noteText);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
}, new NewMessage({ incoming: true }));